# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Push and Deploy at Digital Ocean

on:
# Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  REGISTRY: "registry.digitalocean.com/devsecopstest"
  IMAGE_NAME: "hugosite"

  COMMAND: "ifconfig"
  
jobs:
  code_check:
    runs-on: ubuntu-latest
    steps:
  
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: markdown-link-check
    # You may pin to the exact commit or the version.
    # uses: gaurav-nelson/github-action-markdown-link-check@9710f0fec812ce0a3b98bef4c9d842fc1f39d976
      uses: gaurav-nelson/github-action-markdown-link-check@1.0.13
      with:
        # Use yes to enable markdown-link-check quiet mode which only list errors.
        use-quiet-mode: no # default is no
        # Use yes to enable markdown-link-check verbose mode which lists additional details.
        use-verbose-mode: yes # default is no
        # Specify path to a markdown-link-check JSON configuration file.
        #config-file: # default is mlc_config.json
        # Specify path to a custom folder where your markdown files are located.
        folder-path: . # default is .
        # Specify a max-depth of directories you want to search for markdown files.
        max-depth: 3 # default is -1
        # Use yes to only check for modified markdown files instead of checking all markdown files.
        #check-modified-files-only: # default is no
        # Use this to specify the base branch against which the action finds the modififed files.
        base-branch: master # default is master
        # Use this to specify the file extension of Markdown files.
        file-extension: .md # default is .md
        # Specify additional files you want to check
        #file-path: # default is 
        
  security_test:
  
    name: sensitive info check
    runs-on: ubuntu-latest
    needs: code_check
    steps:
  
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Install git-secret
      # You may pin to the exact commit or the version.
      # uses: Kingmidas74/git-secret-github-action@25e24ea809349f430b23c182836f693bebe483f2
      uses: Kingmidas74/git-secret-github-action@latest
      with:
        #prefix for installation
       prefix: ''
       #optional, default is usr/local
      
    #- name: git-secret check
    #  run: git-secrets --install | git-secrets --add 'password\s*=\s*.+' | git add . | git commit -m "Added"

  build_and_push:
    
    name: Docker build and push
    runs-on: ubuntu-latest
    needs: security_test
    steps:
      
    - name: Checkout
      uses: actions/checkout@v2
    #It is an official GitHub Action used to check-out a repository so a workflow can access it.
    # By default, it clones your current repository ({{ github.repository }}) but you can also use this action to clone a different repository, 
    # and specify additionnal parameters like token, branch, path etc...
    - name: Build container image
      run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 600

    - name: Push image to DigitalOcean Container Registry
      run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
      

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          KEY: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,COMMAND
          script: |
            docker login $REGISTRY -u ${{ secrets.DIGITAL_OCEAN_DOCKER_KEY }} -p ${{ secrets.DIGITAL_OCEAN_DOCKER_KEY }}
            # Stop running container
            docker stop $(echo $IMAGE_NAME)

            # Remove old container
            docker rm $(echo $IMAGE_NAME)

            # Run a new container from a new image
            docker run -d \
            --restart always \
            -p 80:80 \
            --name $(echo $IMAGE_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
    
